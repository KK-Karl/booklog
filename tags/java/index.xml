<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on mybooklog</title>
    <link>https://kk-karl.github.io/booklog/tags/java/</link>
    <description>Recent content in Java on mybooklog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2024-2099 mybooklog</copyright>
    <lastBuildDate>Tue, 23 Apr 2024 14:00:10 +0800</lastBuildDate>
    <atom:link href="https://kk-karl.github.io/booklog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>好用的在线工具集合</title>
      <link>https://kk-karl.github.io/booklog/post/myblg07/</link>
      <pubDate>Wed, 17 Apr 2024 08:52:47 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg07/</guid>
      <description>好用的在线工具集合（本人收集） 在线工具合集&#xA;websocket在线测试 在线测试&#xA;菜鸟教程&#xA;艺术字、二维码&#xA;在线unicode&#xA;property转yaml&#xA;MD5转换&#xA;电子书转换&#xA;ASCII 艺术字转换&#xA;JAVA17 doc文档&#xA;在线gif&#xA;ipv6检测&#xA;文心一言&#xA;阿里巴巴矢量库</description>
    </item>
    <item>
      <title>java导入SSL证书</title>
      <link>https://kk-karl.github.io/booklog/post/%E6%88%91%E7%9A%84%E8%AE%A1%E5%88%92%E7%9B%AE%E6%A0%87/</link>
      <pubDate>Mon, 15 Apr 2024 14:01:37 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/%E6%88%91%E7%9A%84%E8%AE%A1%E5%88%92%E7%9B%AE%E6%A0%87/</guid>
      <description>这个错误通常是由于您正在尝试连接到使用自签名证书或未经受信任的根证书颁发机构签发的证书的SSL站点。&#xA;要解决此问题，有以下几种方法：&#xA;01、导入SSL证书 将SSL证书导入到您的Java keystore中。可以使用keytool工具将证书添加到Java keystore。使用以下命令：&#xA;keytool -importcert -file certificate_file -alias alias_name -keystore keystore_file&#xA;其中certificate_file是您要导入的证书文件，alias_name是别名，keystore_file是Java keystore文件的路径和名称。&#xA;02、禁用证书验证 如果您不想导入证书，可以在您的Java代码中禁用SSL证书验证。这是不推荐的，因为这可能会带来安全风险。但是，如果您只是在开发环境中使用SSL站点，并且您知道站点是安全的，则可以使用以下代码禁用证书验证：&#xA;TrustManager[] trustAllCerts = new TrustManager[] {&#xD;new X509TrustManager() {&#xD;public java.security.cert.X509Certificate[] getAcceptedIssuers() {&#xD;return null;&#xD;}&#xD;public void checkClientTrusted(X509Certificate[] certs, String authType) {&#xD;}&#xD;public void checkServerTrusted(X509Certificate[] certs, String authType) {&#xD;}&#xD;}&#xD;};&#xD;SSLContext sc = SSLContext.getInstance(&amp;#34;SSL&amp;#34;);&#xD;sc.init(null, trustAllCerts, new java.security.SecureRandom());&#xD;HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory()); 03、更新Java证书存储库 如果您的Java证书存储库已过期或缺少必要的根证书颁发机构，则可能需要更新Java证书存储库。可以从各种证书颁发机构网站下载最新的根证书并将其添加到Java证书存储库中。&#xA;这些解决方案可能会因您的具体情况而异。如果您仍然无法解决问题，请查看日志以获取更多信息，并考虑联系站点管理员以获取帮助。</description>
    </item>
    <item>
      <title>SimpleDateFormat的线程安全问题以及四种解决办法</title>
      <link>https://kk-karl.github.io/booklog/post/myblg04/</link>
      <pubDate>Sun, 14 Apr 2024 14:10:45 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg04/</guid>
      <description>SimpleDateFormat的线程安全问题以及四种解决办法 1.多线程环境下SimpleDateFormat的不安全问题: SimpleDateFormat的format方法实际操作的就是Calendar（Calendar变量也就是一个共享变量线程不安全）。&#xA;也正是因为每次在转化时间的时候foramat会先把时间set到calendar中，这样就会导致A线程读取到B线程的时间&#xA;image&#xA;image&#xA;我们来试一下： 定义两个全局常量&#xA;private static final String myDateStr = &amp;#34;2022-01-01&amp;#34;; private static final SimpleDateFormat dateFormat = new SimpleDateFormat(&amp;#34;yyyy-MM-dd&amp;#34;); //写一个测试方法： private static void test(Callable task) throws Exception { ExecutorService pool = Executors.newFixedThreadPool(10); List&amp;lt;Future&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; 10; i++) { Future future = pool.submit(task); list.add(future); } for (Future future : list) { System.out.println(future.get()); } pool.shutdown(); } //开始测试： public static void main(String[] args) throws Exception { test(()-&amp;gt;dateFormat.</description>
    </item>
    <item>
      <title>RocketMQ学习</title>
      <link>https://kk-karl.github.io/booklog/post/myblg03/</link>
      <pubDate>Thu, 11 Apr 2024 13:47:41 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg03/</guid>
      <description>MQ有什么用 解耦 我觉得从某种角度来说，微服务促进了MQ的蓬勃发展，本来一个系统有N多个模块，所有模块都强耦合在一起，现在微服务了，一个模块就是一个系统，系统之间肯定需要交互，交互有三种常见的方法，一种是RPC，一种是HTTP，一种就是MQ了。&#xA;异步 原本一个业务分为N步，要一步一步处理，才能把最终的结果返回给用户，现在有了MQ，先把最关键的部分处理完毕，然后发送消息到MQ，直接返回给用户OK，至于后面的步骤在后台慢慢处理吧，真乃提升用户体验的神器。&#xA;削峰 某个接口的请求量突然飙升，势必会对应用服务器、数据库服务器造成很大的压力，现在有了MQ，来多少请求都不在怕的，后台慢慢处理呗。&#xA;RocketMQ简介 RocketMQ是用Java编写的，是阿里开源的消息中间件，吸收了Kafka很多优点。Kafka也是比较热门的消息中间件，不过Kafka是用Scala编写的，不利于Java程序员去阅读源码，也不利于Java程序员做一些定制化的开发。接触过Kafka的小伙伴都知道，要用好Kafka实属不易，相对来说，RocketMQ简单多了，而且RocketMQ有阿里加持，经历了N次双11的考验，比较适合国内互联网公司，所以国内使用RocketMQ的公司很多。&#xA;RocketMQ四大组件 图片来自https://gitee.com/mirrors/rocketmq/blob/master/docs/cn/architecture.md&#xA;可以看到RocketMQ主要有四个组件：&#xA;NameServer 无状态服务，注册中心，可集群部署，但是NameServer节点之间没有任何数据交互。 Broker会以定时把Topic路由信息上报给所有的NameServer。Producer、Consumer会随机选择一个NameServer定时Topic更新路由信息。 Topic路由信息在NameServer集群中采用最终一致性。 保证AP。 Broker RocketMQ的服务端，用于存储消息、分发消息。 Broker会定时把自身拥有的所有的Topic路由信息上报给NameServer。 Broker有两个角色：Master、Follower，Master承担读（消费消息）写（生产消息）操作，如果Master比较忙，或者不可用，Follower可以承担读操作。BrokerId=0，代表是Matser，BrokerId!=0，代表是Follower，需要注意的有两点： 其一，目前为止，BrokerId=1的Follower才可以承担读操作； 其二，只有较高版本的RocketMQ才支持当Master节点挂掉，Follower自动升级到Master。 Producer 生产者，每隔一定时间向NameServer发起Topic的路由信息查询。&#xA;Consumer 消费者，每隔一定时间向NameServer发起Topic的路由信息查询。&#xA;为什么注册中心不选用Zookeeper 其实，在低版本的RocketMQ中，确实是选用Zookeeper作为注册中心的，但是后面改成了现在的NameServer，猜想主要原因是：&#xA;RocketMQ已经是一个中间件了，不想再依赖其他中间件。 Zookeeper比较重，有很多功能RocketMQ是用不到的，不如写一个轻量级的注册中心。 Zookeeper是CP，一旦触发领导选举，那么注册中心就不可用了，而RocketMQ的注册中心，不需要强一致性，只要保证最终一致性。 RocketMQ消息领域模型 Message 传输的消息。 消息必须有Topic。 消息可以有多个Tag和多个Key，可以看做消息的附加属性。 Topic 一类消息的集合。 每个消息必须有一个Topic。 消息的第一级类型。 Tag 一个消息除了有Topic之外，还可以有Tag，用来细分同一个Topic下的不同种类的消息。 Tag不是必须的。 消息的第二级类型。 Group 分为ProducerGroup，ConsumerGroup，我们更多的是关注ConsumerGroup，ConsumerGroup包含多个Consumer。&#xA;在集群消费模式下，一个ConsumerGroup下的Consumer共同消费一个Topic，且每个Consumer会被分配到N个队列，但是一个队列只会被一个Consumer消费，不同的ConsumerGroup可以消费同一个Topic，一条消息会被订阅此Topic的所有ConsumerGroup消费。&#xA;Queue 一个Topic默认包含四个Queue。 在集群消费模式下，同一个ConsumerGroup中的Consumer可以消费多个Queue的消息，但是一个Queue只能被一个Consumer消费。 Queue中的消息是有序的。 分为读Queue和写Queue，一般来说，读Queue的数量和写Queue的数量是一致的，否则很容易出问题。 消费模式 消费模式有两种：Clustering（集群消费）和Broadcasting（广播消费）。&#xA;和其他MQ不同，其他MQ是在发送消息的时候，指定是集群消费还是广播消费，RocketMQ是在消费者端设置是集群消费还是广播消费。&#xA;Clustering（集群消费） 默认情况下是集群消费模式，该模式下，ConsumerGroup所有的Consumer共同消费一个Topic的消息，每个Consumer负责消费N个队列的消息（N也可能为1，甚至是0，没有分配到队列），但是一个队列只会被一个Consumer消费。如果某个Consumer挂掉，ConsumerGroup下的其他Consumer会接替挂掉的Consumer继续消费。&#xA;集群消费模式下，消费进度维护在Broker端，存储路径为${ROCKET_HOME}/store/config/ consumerOffset.json，如下图所示： 使用topicName@consumerGroupName为Key，消费进度为Value，Value的形式是queueId:offset ，说明如果有多个ConsumerGroup，每个ConsumerGroup的消费进度是不同的，需要分开来存储。&#xA;Broadcasting（广播消费） 广播消费消息会发给ConsumerGroup中所有的Consumer。&#xA;广播消费模式下，消费进度维护在Consumer端。&#xA;消费队列负载算法与重平衡机制 消费队列负载算法 我们知道了在集群消费模式下，ConsumerGroup下所有的Consumer共同消费一个Topic的消息，每个Consumer负责消费N个队列的消息，那么具体是如何分配的呢？这就涉及到消费队列负载算法了。&#xA;RocketMQ提供了众多的消费队列负载算法，其中最常用的是两种算法，即AllocateMessageQueueAveragely、AllocateMessageQueueAveragelyByCircle。下面我们来看下这两个算法的区别。&#xA;假设，现在一个Topic有16个队列，用q0~q15表示，有3个Consumer，用c0-c2表示。</description>
    </item>
    <item>
      <title>基于Spring 5.0的响应式编程</title>
      <link>https://kk-karl.github.io/booklog/post/myblg01/</link>
      <pubDate>Sun, 31 Dec 2023 12:20:34 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg01/</guid>
      <description>标题 学习目标 基于Spring 5.0的响应式编程 什么是响应式编程？ 响应式编程是一种编程范式，其核心思想是使用异步数据流来处理数据。它旨在解决传统编程中遇到的并发性和数据流的问题，并且适用于各种应用程序，包括Web应用程序、移动应用程序和IoT设备等。&#xA;在响应式编程中，您可以使用Observable对象来表示数据流。这些流可以是无限的，可以被观察者订阅并异步地处理数据。响应式编程强调使用数据流和变换来处理数据，而不是使用显式的控制流语句和变量。&#xA;Spring 5.0和响应式编程 Spring 5.0是Spring Framework的一个重要版本，引入了对响应式编程的支持。在Spring 5.0中，您可以使用Reactor项目提供的功能来实现响应式编程。&#xA;Reactor是一个基于Java 8的库，提供了一组用于响应式编程的操作符。Reactor操作符可以应用于Flux和Mono对象，这些对象分别表示多个值和单个值的响应式数据流。通过使用Reactor操作符，您可以轻松地将数据流转换为不同的形式，例如过滤数据、转换数据和合并数据流。&#xA;Spring 5.0引入了对WebFlux的支持，这是一种基于响应式编程的Web框架。WebFlux允许您使用响应式编程的方式处理Web请求和响应，并且能够提供非常高的并发性能和可伸缩性。&#xA;学习响应式编程和Spring 5.0 如果您想学习响应式编程和Spring 5.0，以下是一些资源可以帮助您入门：&#xA;Reactor Core官方文档 - Reactor库的官方文档，提供了有关Reactor操作符的详细信息以及如何使用它们来实现响应式编程的示例代码。&#xA;Spring Framework官方文档 - Spring Framework的官方文档，提供了有关Spring 5.0和WebFlux的详细信息，以及如何使用它们来实现响应式编程的示例代码。&#xA;响应式编程入门指南 - 一篇入门指南，介绍了响应式编程的概念以及如何在Java中实现响应式编程。&#xA;[Reactive&#xA;Building Reactive RESTful APIs using Spring WebFlux - 一篇教程，介绍了如何使用Spring WebFlux构建响应式的RESTful API。&#xA;除此之外，还有许多博客文章、视频教程和在线课程可以帮助您深入了解响应式编程和Spring 5.0的应用。建议您在学习过程中积极尝试实践，并使用Spring Boot创建简单的响应式应用程序。&#xA;基于Spring 5.0的响应式编程应用 在实际开发中，您可以使用Spring 5.0的响应式编程功能来构建高性能、高并发的应用程序。以下是一些示例应用：&#xA;Web应用程序 - 使用Spring WebFlux和响应式编程来处理Web请求和响应，可以提高Web应用程序的并发性和可伸缩性。 数据流处理 - 使用响应式编程来处理流式数据，例如从消息队列、传感器和其他数据源接收数据。通过使用响应式编程，可以轻松地处理大量的异步数据流。 服务间通信 - 使用Spring Cloud和响应式编程来构建微服务架构，可以实现高效的服务间通信和负载均衡。 总之，Spring 5.0的响应式编程功能可以帮助您构建高性能、高并发的应用程序。建议您在学习和使用响应式编程和Spring 5.0时，保持开放心态和积极探索精神，以获取最佳的开发体验和应用效果。&#xA;Spring 5.0的响应式编程的优势和挑战 Spring 5.</description>
    </item>
  </channel>
</rss>
