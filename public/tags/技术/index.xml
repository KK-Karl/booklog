<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on mybooklog</title>
    <link>https://kk-karl.github.io/booklog/tags/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on mybooklog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2024-2099 mybooklog</copyright>
    <lastBuildDate>Sun, 28 Apr 2024 09:45:52 +0800</lastBuildDate>
    <atom:link href="https://kk-karl.github.io/booklog/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GRPC学习及实践</title>
      <link>https://kk-karl.github.io/booklog/post/myblg12/</link>
      <pubDate>Sat, 27 Apr 2024 22:49:48 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg12/</guid>
      <description>GRPC学习及实践 RPC RPC 代指远程过程调用（Remote Procedure Call），它的调用包含了传输协议和编码（对象序列号）协议等等。允许运行于一台计算机的程序调用另一台计算机的子程序，而开发人员无需额外地为这个交互作用编程。 RPC具有简单、通用、安全、效率的特点，可以基于 HTTP 协议进行调用。&#xA;GRPC相关安装 安装GRPC 1、go get方式&#xA;$ go get -u google.golang.org/grpc 2、通过github 进入$GOTPATH目录，新建google.golang.org目录，拉取golang在github上的镜像库：&#xA;$ cd /usr/local/go/path/src $ mkdir google.golang.org $ cd google.golang.org/ $ git clone https://github.com/grpc/grpc-go $ mv grpc-go/ grpc/ Protoc Plugin编译器插件安装 $ go get -u github.com/golang/protobuf/protoc-gen-go 将Protoc Plugin的可执行文件从 GOPATH中移动到𝐺𝑂𝑃𝐴𝑇𝐻中移动到GOBIN 下&#xA;$ which protoc-gen-go /usr/local/bin/protoc-gen-go Protocol Buffers v3安装 $ wget https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-all-3.5.1.zip $ unzip protobuf-all-3.5.1.zip $ cd protobuf-3.5.1/ $ ./configure $ make $ make install $ protoc --version libprotoc 3.</description>
    </item>
    <item>
      <title>GO语言包管理</title>
      <link>https://kk-karl.github.io/booklog/post/myblg11/</link>
      <pubDate>Sat, 27 Apr 2024 22:33:02 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg11/</guid>
      <description>GO语言包管理 包介绍 包（package）是多个Go源码的集合，go语言有很多内置包，比如fmt，os，io等。&#xA;定义包 main包是一个可执行的包，只应用程序的入口包，编译完会生成一个可执行文件。&#xA;一个目录下的同级文件归属一个包。 包名可以不和文件夹的名字一样，包名不能包含-符号。&#xA;package 包名 可见性 如果想在一个包中引用另外一个包里的标识符（如变量、常量、类型、函数等）时，该标识符必须是对外可见的（public）。在Go语言中只需要将标识符的首字母大写就可以。&#xA;// 首字母小写，外部包不可见，只能在当前包内使用 var num = 10 //首字母大写外部包可见，可在其他包中使用 const Name = &amp;#34;ares&amp;#34; // 首字母小写，外部包不可见，只能在当前包内使用 type person struct { name string } type Student struct { Name string //可在包外访问的方法 class string //仅限包内访问的字段 } type Payer interface { init() //仅限包内访问的方法 Pay() //可在包外访问的方法 } // 首字母大写，外部包可见，可在其他包中使用 func Add(x, y int) int { return x + y } func age() { // 首字母小写，外部包不可见，只能在当前包内使用 var Age = 18 // 函数局部变量，外部包不可见，只能在当前函数内使用 fmt.</description>
    </item>
    <item>
      <title>技术目标</title>
      <link>https://kk-karl.github.io/booklog/post/myblg10/</link>
      <pubDate>Tue, 23 Apr 2024 13:57:10 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg10/</guid>
      <description>&#xA;技术发展目标 技术分析数字 </description>
    </item>
    <item>
      <title>基于Spring 5.0的响应式编程</title>
      <link>https://kk-karl.github.io/booklog/post/%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sun, 14 Apr 2024 23:34:11 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</guid>
      <description>基于Spring 5.0的响应式编程 什么是响应式编程？ 响应式编程是一种编程范式，其核心思想是使用异步数据流来处理数据。它旨在解决传统编程中遇到的并发性和数据流的问题，并且适用于各种应用程序，包括Web应用程序、移动应用程序和IoT设备等。&#xA;在响应式编程中，您可以使用Observable对象来表示数据流。这些流可以是无限的，可以被观察者订阅并异步地处理数据。响应式编程强调使用数据流和变换来处理数据，而不是使用显式的控制流语句和变量。&#xA;Spring 5.0和响应式编程 Spring 5.0是Spring Framework的一个重要版本，引入了对响应式编程的支持。在Spring 5.0中，您可以使用Reactor项目提供的功能来实现响应式编程。&#xA;Reactor是一个基于Java 8的库，提供了一组用于响应式编程的操作符。Reactor操作符可以应用于Flux和Mono对象，这些对象分别表示多个值和单个值的响应式数据流。通过使用Reactor操作符，您可以轻松地将数据流转换为不同的形式，例如过滤数据、转换数据和合并数据流。&#xA;Spring 5.0引入了对WebFlux的支持，这是一种基于响应式编程的Web框架。WebFlux允许您使用响应式编程的方式处理Web请求和响应，并且能够提供非常高的并发性能和可伸缩性。&#xA;学习响应式编程和Spring 5.0 如果您想学习响应式编程和Spring 5.0，以下是一些资源可以帮助您入门：&#xA;Reactor Core官方文档 - Reactor库的官方文档，提供了有关Reactor操作符的详细信息以及如何使用它们来实现响应式编程的示例代码。&#xA;Spring Framework官方文档 - Spring Framework的官方文档，提供了有关Spring 5.0和WebFlux的详细信息，以及如何使用它们来实现响应式编程的示例代码。&#xA;响应式编程入门指南 - 一篇入门指南，介绍了响应式编程的概念以及如何在Java中实现响应式编程。&#xA;[Reactive&#xA;Building Reactive RESTful APIs using Spring WebFlux - 一篇教程，介绍了如何使用Spring WebFlux构建响应式的RESTful API。&#xA;除此之外，还有许多博客文章、视频教程和在线课程可以帮助您深入了解响应式编程和Spring 5.0的应用。建议您在学习过程中积极尝试实践，并使用Spring Boot创建简单的响应式应用程序。&#xA;基于Spring 5.0的响应式编程应用 在实际开发中，您可以使用Spring 5.0的响应式编程功能来构建高性能、高并发的应用程序。以下是一些示例应用：&#xA;Web应用程序 - 使用Spring WebFlux和响应式编程来处理Web请求和响应，可以提高Web应用程序的并发性和可伸缩性。 数据流处理 - 使用响应式编程来处理流式数据，例如从消息队列、传感器和其他数据源接收数据。通过使用响应式编程，可以轻松地处理大量的异步数据流。 服务间通信 - 使用Spring Cloud和响应式编程来构建微服务架构，可以实现高效的服务间通信和负载均衡。 总之，Spring 5.0的响应式编程功能可以帮助您构建高性能、高并发的应用程序。建议您在学习和使用响应式编程和Spring 5.0时，保持开放心态和积极探索精神，以获取最佳的开发体验和应用效果。&#xA;Spring 5.0的响应式编程的优势和挑战 Spring 5.0的响应式编程功能提供了许多优势和挑战。以下是一些值得注意的点：&#xA;优势 高性能和高并发 - 使用响应式编程，可以轻松地处理大量的异步数据流，并提高应用程序的并发性和可伸缩性。 响应式API - 响应式编程支持异步和反应式的API，可以更好地处理客户端请求和响应，并提供更好的用户体验。 适用于云计算 - 响应式编程是云原生应用程序的理想选择，可以支持容器化和微服务架构。 挑战 学习曲线 - 响应式编程需要一些时间来适应和掌握。需要学习的概念包括反应式流、反应式类型、反应式操作符等。 程序设计复杂性 - 响应式编程需要仔细考虑设计和实现，以避免复杂的程序结构和代码混乱。 资源消耗 - 响应式编程需要更多的资源，例如CPU和内存，以处理大量的异步数据流。 总结 Spring 5.</description>
    </item>
    <item>
      <title>CAS框架</title>
      <link>https://kk-karl.github.io/booklog/post/myblg05/</link>
      <pubDate>Sun, 14 Apr 2024 14:25:09 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg05/</guid>
      <description>1、背景介绍 单点登录：Single Sign On,简称SSO，SSO使得在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。&#xA;CAS框架：CAS（Central Authentication Service）是实现SSO单点登录的框架。&#xA;2、盗一张学习CAS绝大多都看过的图以及执行部分分析 注：已分不清原创，此处就不给出地址了。&#xA;从结构上看，CAS包含两个部分：CAS Server 和CAS Client需要独立部署，主要负责对用户的认证工作；CAS Client负责处理对客户端受保护资源的访问请求，需要登录时，重定向到CAS Server.图1是CAS最基本的协议过程：&#xA;CAS Client 与受保护的客户端应用部署在一起，以Filter方式保护 Web 应用的受保护资源，过滤从客户端过来的每一个 Web 请求，同时， CAS Client会分析HTTP 请求中是否包请求 Service Ticket( 上图中的 Ticket) ，如果没有，则说明该用户是没有经过认证的，于是，CAS Client会重定向用户请求到CAS Server（ Step 2 ）。 Step 3是用户认证过程，如果用户提供了正确的Credentials， CAS Server 会产生一个随机的 Service Ticket ，然后，缓存该 Ticket ，并且重定向用户到CAS Client（附带刚才产生的Service Ticket）， Service Ticket 是不可以伪造的，最后， Step 5 和 Step6是 CAS Client 和 CAS Server之间完成了一个对用户的身份核实，用Ticket查到 Username ，因为 Ticket是 CAS Server 产生的，因此，所以 CAS Server 的判断是毋庸置疑的。&#xA;该协议完成了一个很简单的任务，所有与CAS的交互均采用SSL协议，确保ST和TGC的安全性。协议工作过程会有2此重定向过程，但是CAS Client与CAS Server之间进行ticket验证的过程对于用户是透明的。</description>
    </item>
    <item>
      <title>SimpleDateFormat的线程安全问题以及四种解决办法</title>
      <link>https://kk-karl.github.io/booklog/post/myblg04/</link>
      <pubDate>Sun, 14 Apr 2024 14:10:45 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg04/</guid>
      <description>SimpleDateFormat的线程安全问题以及四种解决办法 1.多线程环境下SimpleDateFormat的不安全问题: SimpleDateFormat的format方法实际操作的就是Calendar（Calendar变量也就是一个共享变量线程不安全）。&#xA;也正是因为每次在转化时间的时候foramat会先把时间set到calendar中，这样就会导致A线程读取到B线程的时间&#xA;image&#xA;image&#xA;我们来试一下： 定义两个全局常量&#xA;private static final String myDateStr = &amp;#34;2022-01-01&amp;#34;; private static final SimpleDateFormat dateFormat = new SimpleDateFormat(&amp;#34;yyyy-MM-dd&amp;#34;); //写一个测试方法： private static void test(Callable task) throws Exception { ExecutorService pool = Executors.newFixedThreadPool(10); List&amp;lt;Future&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; 10; i++) { Future future = pool.submit(task); list.add(future); } for (Future future : list) { System.out.println(future.get()); } pool.shutdown(); } //开始测试： public static void main(String[] args) throws Exception { test(()-&amp;gt;dateFormat.</description>
    </item>
    <item>
      <title>redis限流方案汇总</title>
      <link>https://kk-karl.github.io/booklog/post/myblg02/</link>
      <pubDate>Sun, 14 Apr 2024 13:47:36 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg02/</guid>
      <description>楔子 &amp;ldquo;限流&amp;quot;这种事情即使在生活中也很常见，比如我们银行办理业务，银行不可能给去的所有人同时服务，因为柜台就那么几个。所以可能一次只给5个人办理业务，其他的人只能在后面排队；再比如打饭等等，也是一样的道理。因为能提供服务的数量有限，所以必须要通过限流的方式。&#xA;在程序的层面上也是一样的，如果我们的系统只能支持10万人同时在线购物，但是某一天突然来了100万个用户，那么后果显然是服务器直接瘫痪。因此只能让&amp;quot;限流&amp;quot;的功能来维护，先让一部分用户进行购物，其它的人进行排队，这样就等保证整个系统进行运转了。&#xA;这里提一下微博，微博因为哪个明星出轨了，或者哪个明星恋爱官宣了，导致服务器挂掉不止一次了。这里也是因为人数骤增导致的，当然这只是表层的原因，关于背后详细的架构、以及为什么这种情况一出现微博就又可能会挂掉的原因，我可能会在其它的系列中说，这里先不谈，今天主要是谈限流。&#xA;这里立一个flag，要是哪天所有人都以为还是单身的胡歌在微博上突然官宣：&amp;ldquo;大家好，这是我的妻子xxx，我们昨天领证了，希望得到大家的祝福。&amp;quot;，然后再附带两人结婚照和结婚证，我跟你说微博必瘫痪，话就撂这了。&#xA;Redis如何实现限流功能 关于限流所用的算法有两个：漏桶算法、令牌算法。&#xA;漏桶算法 漏桶算法的灵感源于漏斗，如下图所示：&#xA;首先，如果让你实现一个限流的算法你要怎么做呢？我们可以规定一个时间，比如60s，在60s之内只能处理100个请求，如果超过了100个，那么就将多余的请求丢弃掉。但是这样存在一个问题：如果在10s内请求就已经100个，因此剩余的50s只能把再来的请求给丢弃掉。但是这100个请求又花了10s中就全部处理完了，那么剩余的40s做什么？显然这样做就存在这资源浪费的情况。于是可能有人想到使用队列的方式，设置队列的容量为100，任务处理完了就出队，然后等待处理的入队，这样就保证了资源的利用率，恭喜你，漏桶算法就是这么做的。&#xA;说实话从漏斗本身上想，也能猜出使用的是队列，一边进一边出。无论漏斗上面的水流有多少，漏斗下面的水都是均匀流出的。如果上面的水流量大于下面流出的水流量的话，那么漏斗会慢慢变满；反之，漏斗永远不会被装满，并一直流出。&#xA;漏桶算法的实现步骤是：先声明一个队列保存请求，这个队列相当于漏斗，当队列容量满了之后，就放弃新来的请求。然后执行的话则是通过声明另一个线程定期从队列中获取一个或多个任务执行，这样就实现了漏桶算法。&#xA;漏桶算法可以在编程语言这一层实现。&#xA;令牌算法 令牌算法指的是有一个程序以某种恒定的速度生成令牌，并存入令牌桶中，而每个请求需要先获取令牌才能执行，如果没有获取到令牌的话则放弃执行。如下图所示：&#xA;这种令牌算法，我们也可以使用Python的threading模块来实现。&#xA;更好的限流方案 在Redis4.0，已经为我们实现了限流功能，并提供了原子的限流指令，再加上Redis这个天生的分布式程序就可以完美地实现限流了。&#xA;实现限流需要使用Redis提供的Redis-Cell模块，该模块使用的便是漏桶算法，使用起来也很简单，通过cl.throttle即可，但是我们需要提前安装。&#xA;前往：https://github.com/brandur/redis-cell/releases下载对应系统的安装包，有源码编译和安装包安装两种方式，源码编译需要rust环境、比较复杂，所以推荐安装包安装。安装之后，直接解压即可，里面会有一个libredis_cell.so文件，执行redis-cli通过module load加载即可。&#xA;&amp;gt; cl.throttle mylimit 15 30 60 1）（integer）0 # 0 表示获取成功，1 表示拒绝 2）（integer）15 # 漏斗容量 3）（integer）14 # 漏斗剩余容量 4）（integer）-1 # 被拒绝之后，多长时间之后再试（单位：秒）-1 表示无需重试 5）（integer）2 # 多久之后漏斗完全空出来 其中 15 为漏斗的容量，30 / 60s 为漏斗的速率。&#xA;通过Redis-Cell，我们则可以实现分布式原子级别的限流，更详细的使用可以查看官网</description>
    </item>
    <item>
      <title>基于Spring 5.0的响应式编程</title>
      <link>https://kk-karl.github.io/booklog/post/myblg01/</link>
      <pubDate>Sun, 31 Dec 2023 12:20:34 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg01/</guid>
      <description>标题 学习目标 基于Spring 5.0的响应式编程 什么是响应式编程？ 响应式编程是一种编程范式，其核心思想是使用异步数据流来处理数据。它旨在解决传统编程中遇到的并发性和数据流的问题，并且适用于各种应用程序，包括Web应用程序、移动应用程序和IoT设备等。&#xA;在响应式编程中，您可以使用Observable对象来表示数据流。这些流可以是无限的，可以被观察者订阅并异步地处理数据。响应式编程强调使用数据流和变换来处理数据，而不是使用显式的控制流语句和变量。&#xA;Spring 5.0和响应式编程 Spring 5.0是Spring Framework的一个重要版本，引入了对响应式编程的支持。在Spring 5.0中，您可以使用Reactor项目提供的功能来实现响应式编程。&#xA;Reactor是一个基于Java 8的库，提供了一组用于响应式编程的操作符。Reactor操作符可以应用于Flux和Mono对象，这些对象分别表示多个值和单个值的响应式数据流。通过使用Reactor操作符，您可以轻松地将数据流转换为不同的形式，例如过滤数据、转换数据和合并数据流。&#xA;Spring 5.0引入了对WebFlux的支持，这是一种基于响应式编程的Web框架。WebFlux允许您使用响应式编程的方式处理Web请求和响应，并且能够提供非常高的并发性能和可伸缩性。&#xA;学习响应式编程和Spring 5.0 如果您想学习响应式编程和Spring 5.0，以下是一些资源可以帮助您入门：&#xA;Reactor Core官方文档 - Reactor库的官方文档，提供了有关Reactor操作符的详细信息以及如何使用它们来实现响应式编程的示例代码。&#xA;Spring Framework官方文档 - Spring Framework的官方文档，提供了有关Spring 5.0和WebFlux的详细信息，以及如何使用它们来实现响应式编程的示例代码。&#xA;响应式编程入门指南 - 一篇入门指南，介绍了响应式编程的概念以及如何在Java中实现响应式编程。&#xA;[Reactive&#xA;Building Reactive RESTful APIs using Spring WebFlux - 一篇教程，介绍了如何使用Spring WebFlux构建响应式的RESTful API。&#xA;除此之外，还有许多博客文章、视频教程和在线课程可以帮助您深入了解响应式编程和Spring 5.0的应用。建议您在学习过程中积极尝试实践，并使用Spring Boot创建简单的响应式应用程序。&#xA;基于Spring 5.0的响应式编程应用 在实际开发中，您可以使用Spring 5.0的响应式编程功能来构建高性能、高并发的应用程序。以下是一些示例应用：&#xA;Web应用程序 - 使用Spring WebFlux和响应式编程来处理Web请求和响应，可以提高Web应用程序的并发性和可伸缩性。 数据流处理 - 使用响应式编程来处理流式数据，例如从消息队列、传感器和其他数据源接收数据。通过使用响应式编程，可以轻松地处理大量的异步数据流。 服务间通信 - 使用Spring Cloud和响应式编程来构建微服务架构，可以实现高效的服务间通信和负载均衡。 总之，Spring 5.0的响应式编程功能可以帮助您构建高性能、高并发的应用程序。建议您在学习和使用响应式编程和Spring 5.0时，保持开放心态和积极探索精神，以获取最佳的开发体验和应用效果。&#xA;Spring 5.0的响应式编程的优势和挑战 Spring 5.</description>
    </item>
  </channel>
</rss>
