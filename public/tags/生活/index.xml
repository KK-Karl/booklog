<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生活 on mybooklog</title>
    <link>https://kk-karl.github.io/booklog/tags/%E7%94%9F%E6%B4%BB/</link>
    <description>Recent content in 生活 on mybooklog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2024-2099 mybooklog</copyright>
    <lastBuildDate>Mon, 15 Apr 2024 15:12:18 +0800</lastBuildDate>
    <atom:link href="https://kk-karl.github.io/booklog/tags/%E7%94%9F%E6%B4%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SimpleDateFormat的线程安全问题以及四种解决办法</title>
      <link>https://kk-karl.github.io/booklog/post/myblg04/</link>
      <pubDate>Sun, 14 Apr 2024 14:10:45 +0800</pubDate>
      <guid>https://kk-karl.github.io/booklog/post/myblg04/</guid>
      <description>SimpleDateFormat的线程安全问题以及四种解决办法 1.多线程环境下SimpleDateFormat的不安全问题: SimpleDateFormat的format方法实际操作的就是Calendar（Calendar变量也就是一个共享变量线程不安全）。&#xA;也正是因为每次在转化时间的时候foramat会先把时间set到calendar中，这样就会导致A线程读取到B线程的时间&#xA;image&#xA;image&#xA;我们来试一下： 定义两个全局常量&#xA;private static final String myDateStr = &amp;#34;2022-01-01&amp;#34;; private static final SimpleDateFormat dateFormat = new SimpleDateFormat(&amp;#34;yyyy-MM-dd&amp;#34;); //写一个测试方法： private static void test(Callable task) throws Exception { ExecutorService pool = Executors.newFixedThreadPool(10); List&amp;lt;Future&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; 10; i++) { Future future = pool.submit(task); list.add(future); } for (Future future : list) { System.out.println(future.get()); } pool.shutdown(); } //开始测试： public static void main(String[] args) throws Exception { test(()-&amp;gt;dateFormat.</description>
    </item>
  </channel>
</rss>
